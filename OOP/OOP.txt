задание:
Кратко описать, какими принципами ООП вы пользуетесь
при разработке приложений (на каких этапах, обосновать)
______________
Перечислим принципы ООП:
1.Абстракция
2.Наследование
3.Инкапсуляция
4.Полиморфизм

1.Абстракция.
После постановки задачи важно создать абстрактную модель того,
 что мы хотим описать. ООП - позволет создавать классы- т.е. то что 
 мы хотим описать, но создавая класс "транспорт" или "автомобиль"
 для решения задачи о расчете стоимости эксплуатации данных ТС
 нам может быть не важен цвет или еще какие-то параметры ТС.
 поэтому принцип ООП "Абстракция" используется при создании модели, 
 в самом начале решения задачи, для выделения необходимой и достаточной
информации о модели. 
 
2.Наследование.
Некоторые свойства объектов общие для разных типов (классов).
 Наследование позволяет один раз описать эти свойства, а потом использовать
 это для всех наследников, что позволяет сократить количество кода, за счет
 его повторного использования при наслоевании классами потомками.
Применяется на этапе создания блок схемы задачи. Важно заранее вынести в родительский класс
общие свойсва, чтобы классы наследники содержали только отличающиеся свойства.

3.Инкапсуляция.
представление класса в виде "черного ящика"
применяется во время написания класса, позволяет разграничить реализацию методов 
класса от интерфейса посредством которого пользователь образается к данному классу.
при написании сложных программ несколькими разработчиками один из разработчиков может
пользоваться классами написаными другим не задумываясь что происходит внутри,
а автор класса может исправлять реализацию (не меняя интерфейс класса), 
что позволяет не менять остальной код, использующий изменяемый класс.
также использованя private переменных запрещает изменение их значений кроме как 
через специально настроенные для этого функции (getter/setter), делая код более устойчивым.

4.Полиморфизм
 Данный принцип позволяет применять одни и те же методы к разным типам переменных
Мы можем создать список различнх переменных и применить ко всем им один метод, 
который вернет разный результат в зависимости от типа переменной.
особенно это удобно когда мы заранее не можем знать, какие из описаных нами
типов попадут в этот список. В этом случае метод вызываемый к каждому из элементов списка
будет выбираться уже на этапе выполнения программы (Run Time),
так называемая Динамическая Диспетчеризация.
Также на этапе последующего развития программы с помощью наследования и полиморфизма
мы можем добавить новые свойства или новые классы, с наименьшим изменением существующего кода.
